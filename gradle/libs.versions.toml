[versions]
# Kotlin
kotlin = "2.1.20"

# Spring
springBoot = "3.4.5"
springDependencyManagement = "1.1.7"
springCloud = "2024.0.1"
springdocOpenapi = "2.8.8"

# Database
hibernateTypes60 = "2.21.1"

# Logging
kotlinLogging = "7.0.7"

# Cache
caffeine = "3.2.0"

# Testing
kotestAssertionsCore = "5.9.1"
kotestExtensionsSpring = "1.3.0"
mockk = "1.14.0"

# Utils
commonsLang3 = "3.18.0"

# Coroutines
kotlinxCoroutines = "1.10.2"

querydsl = "5.1.0"

# prometheus
micrometerPrometheus = "1.15.2"

auth0-java-jwt = "4.5.0"
guava = "32.0.1-jre"
springCloudGcp = "1.2.8.RELEASE"
googleCloudStorage = "2.40.0"
protobuf = "4.28.2"

springAi = "1.0.0-M5"
googleGenai = "1.11.0"

[libraries]
# prometheus
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometerPrometheus" }

# Kotlin
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect" }
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }

# Spring Boot
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-data-jdbc = { module = "org.springframework.boot:spring-boot-starter-data-jdbc" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-docker-compose = { module = "org.springframework.boot:spring-boot-docker-compose" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-oauth2-client = { module = "org.springframework.boot:spring-boot-starter-oauth2-client" }
spring-boot-starter-webflux = { module = "org.springframework.boot:spring-boot-starter-webflux" }

# Spring Cloud
spring-cloud-starter-circuitbreaker-resilience4j = { module = "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j" }
spring-cloud-starter-openfeign = { module = "org.springframework.cloud:spring-cloud-starter-openfeign" }
spring-cloud-gcp-starter = { module = "org.springframework.cloud:spring-cloud-gcp-starter", version.ref = "springCloudGcp" }

# Google Cloud Storage
google-cloud-storage = { module = "com.google.cloud:google-cloud-storage", version.ref = "googleCloudStorage" }

# Spring REST Docs
spring-restdocs-mockmvc = { module = "org.springframework.restdocs:spring-restdocs-mockmvc" }

# Jackson
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin" }

# Logging
kotlin-logging-jvm = { module = "io.github.oshai:kotlin-logging-jvm", version.ref = "kotlinLogging" }

# Coroutines
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutines" }
kotlinx-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlinxCoroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test" }

# QueryDSL
querydsl-apt = { module = "com.querydsl:querydsl-apt", version.ref = "querydsl" }
hibernateTypes60 = { module = "com.vladmihalcea:hibernate-types-60", version.ref = "hibernateTypes60" }

# Flyway
flyway-core = { module = "org.flywaydb:flyway-core" }
flyway-database-postgresql = { module = "org.flywaydb:flyway-database-postgresql" }
postgresql = { module = "org.postgresql:postgresql" }

# Cache
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }

# Swagger/OpenAPI
springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdocOpenapi" }
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commonsLang3" }

# Database
h2 = { module = "com.h2database:h2" }

# Testing
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotestAssertionsCore" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotestAssertionsCore" }
kotest-extensions-spring = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotestExtensionsSpring" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
auth0-java-jwt = { module = "com.auth0:java-jwt", version.ref = "auth0-java-jwt" }

# Guava
guava = { module = "com.google.guava:guava", version.ref = "guava" }

# Protobuf
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }

# Spring AI
spring-ai-bom = { module = "org.springframework.ai:spring-ai-bom", version.ref = "springAi" }
spring-ai-openai = { module = "org.springframework.ai:spring-ai-openai-spring-boot-starter" }
spring-ai-vertex-gemini = { module = "org.springframework.ai:spring-ai-vertex-ai-gemini-spring-boot-starter" }

# Google Gen AI (Gemini)
google-genai = { module = "com.google.genai:google-genai", version.ref = "googleGenai" }

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-noarg = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin" }
kotlin-allopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "springBoot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "springDependencyManagement" }
