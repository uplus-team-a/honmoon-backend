### 1) 이메일/패스워드 로그인으로 세션 토큰 발급
POST {{host}}/api/auth/login
Content-Type: application/json
Accept: application/json

{
  "email": "aekuya_@naver.com",
  "password": "dnjs2079577"
}

> {%
    client.test("이메일 로그인 - 200", () => {
        client.assert(response.status === 200, "Status must be 200 OK");
        client.assert(!!response.body.data.token, "token must exist");
    });
    const token = response.body.data.token;
    client.global.set("authToken", `Bearer ${token}`);
%}

### 2) PNG 이미지 업로드 URL 생성
POST {{host}}/api/images/upload-url?contentType=image/png
Accept: application/json
Authorization: {{authToken}}

> {%
    client.test("PNG 이미지 업로드 URL 생성 - 200", () => {
        client.assert(response.status === 200, "Status must be 200 OK");
        client.assert(!!response.body.data.uploadUrl, "uploadUrl must exist");
        client.assert(!!response.body.data.fileName, "fileName must exist");
        client.assert(!!response.body.data.publicUrl, "publicUrl must exist");
        client.assert(response.body.data.fileName.endsWith(".png"), "fileName should have .png extension");
    });
%}

### 3) 기본 이미지 업로드 URL 생성 (contentType 없음)
POST {{host}}/api/images/upload-url
Accept: application/json
Authorization: {{authToken}}

> {%
    client.test("기본 이미지 업로드 URL 생성 - 200", () => {
        client.assert(response.status === 200, "Status must be 200 OK");
        client.assert(!!response.body.data.uploadUrl, "uploadUrl must exist");
        client.assert(!!response.body.data.fileName, "fileName must exist");
        client.assert(!!response.body.data.publicUrl, "publicUrl must exist");
        client.assert(response.body.data.fileName.endsWith(".jpg"), "fileName should have default .jpg extension");
    });
%}

###
# 실제 파일 업로드는 presigned URL을 사용해서 직접 GCP Storage에 PUT 요청으로 수행
# 예시:
# PUT {{uploadUrl}}
# Content-Type: image/jpeg
# [이미지 바이너리 데이터]
