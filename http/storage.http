### 프로필 이미지 업로드 URL 발급
POST {{host}}/api/user-summary/me/profile-image/upload-url?fileName=profile.jpg
Accept: application/json
Authorization: {{token}}

> {%
client.test("프로필 이미지 업로드 URL 발급 - 200", () => {
  client.assert(response.status === 200, "Status must be 200 OK");
  client.assert(!!response.body.data.uploadUrl, "uploadUrl should exist");
  client.assert(!!response.body.data.fileName, "fileName should exist");
  client.global.set("profileUploadUrl", response.body.data.uploadUrl);
  client.global.set("profileFileName", response.body.data.fileName);
});
%}

### 미션 이미지 업로드 URL 발급
POST {{host}}/api/missions/1/image/upload-url?fileName=mission.jpg
Accept: application/json
Authorization: {{token}}

> {%
client.test("미션 이미지 업로드 URL 발급 - 200", () => {
  client.assert(response.status === 200, "Status must be 200 OK");
  client.assert(!!response.body.data.uploadUrl, "uploadUrl should exist");
  client.assert(!!response.body.data.fileName, "fileName should exist");
  client.global.set("missionUploadUrl", response.body.data.uploadUrl);
  client.global.set("missionFileName", response.body.data.fileName);
});
%}

### 참고: 파일 업로드 절차(수동)
# 1) 위에서 받은 uploadUrl 로 PUT 요청을 전송하여 실제 파일 바이트를 업로드합니다.
#    예) IntelliJ HTTP Client
#    PUT {{profileUploadUrl}}
#    Content-Type: image/jpeg
#    < /absolute/path/to/local/profile.jpg
#
# 2) 업로드 완료 후 퍼블릭 URL을 조립해 사용합니다. 기본 버킷은 http-client.env.json 의 bucket 변수를 사용합니다.
#    예) https://storage.googleapis.com/{{bucket}}/profiles/{{profileFileName}}
#        https://storage.googleapis.com/{{bucket}}/missions/{{missionFileName}}